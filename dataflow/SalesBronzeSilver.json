{
	"name": "SalesBronzeSilver",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "Medallion",
						"type": "LinkedServiceReference"
					},
					"name": "BronzeSales"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "Medallion",
						"type": "LinkedServiceReference"
					},
					"name": "SaveSilverSales"
				}
			],
			"transformations": [
				{
					"name": "selectSales",
					"description": "Select Columns"
				},
				{
					"name": "TransformationSales",
					"description": "Tranformation"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SalesOrderNumber as string,",
				"          OrderDate as string,",
				"          ProductKey as short,",
				"          ResellerKey as short,",
				"          EmployeeKey as short,",
				"          SalesTerritoryKey as short,",
				"          Quantity as short,",
				"          {Unit Price} as string,",
				"          Sales as string,",
				"          Cost as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'medallion',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     wildcardPaths:['Bronze/data*']) ~> BronzeSales",
				"BronzeSales select(mapColumn(",
				"          ProductKey,",
				"          SalesTerritoryKey,",
				"          Quantity,",
				"          UnitPrice = {Unit Price},",
				"          Sales,",
				"          Cost,",
				"          OrderDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectSales",
				"selectSales derive(Year = split(OrderDate, ', ')[3],",
				"          Month = split(split(OrderDate, ', ')[2],\" \")[1],",
				"          UnitPrice = substring(UnitPrice, 2, 20),",
				"          Sales = substring(Sales, 2, 20),",
				"          Cost = substring(Cost, 2, 20)) ~> TransformationSales",
				"TransformationSales sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'medallion',",
				"     folderPath: 'Silver/Sales',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          SalesTerritoryKey",
				"     )) ~> SaveSilverSales"
			]
		}
	}
}